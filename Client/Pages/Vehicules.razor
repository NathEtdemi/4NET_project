@using Shared.ApiModels
@using Shared
@using Shared.FormModels
@using System.Diagnostics
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


@page "/vehicules"
<h3>Véhicules</h3>
<BackButton />
<button class="btn btn-primary" @onclick="OpenAddModal">Ajouter</button>

@if (_vehicles == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table table-striped table-bordered text-center">
		<thead>
		<tr>
			<th>Marque</th>
			<th>Modèle</th>
			<th>Immatriculation</th>
			<th>Action</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var vehicle in _vehicles)
		{
			<tr>
				<td>@vehicle.CarModel.Brand.Name</td>
				<td>@vehicle.CarModel.Name</td>
				<td>@vehicle.NumberPlate</td>
				<td><button class="btn btn-danger" @onclick="@(()=>OnDelete(vehicle))">Delete</button>
					<button class="btn btn-primary" @onclick="(()=>ViewDetails(vehicle.Id))">Voir détails</button></td>
			</tr>
		}
		</tbody>
	</table>
}

@if (IsAdd)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ajouter un véhicule</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
	                <EditForm Model="@FormVehicle" OnValidSubmit="AddVehicle">
		                <DataAnnotationsValidator />
		                <div class="form-group">
			                <label for="numberPlate">Immatriculation</label>
			                <input type="text" class="form-control" id="numberPlate" @bind="@FormVehicle.NumberPlate" required/>
			                <ValidationMessage For="@(() => FormVehicle.NumberPlate)"/>
		                </div>
		                <div class="form-group">
			                <label for="brandId">Marque</label>
			                <select class="form-control" id="brandId" @bind="@SelectedBrandId" @onclick="LoadCarModels">
				                <option value="0">Sélectionner une marque</option>
				                @if (Brands != null)
				                {
					                @foreach (var brand in Brands)
					                {
						                <option value="@brand.Id">@brand.Name</option>
					                }
				                }
			                </select>
		                </div>
		                <div class="form-group">
			                <label for="carModelId">Modèle de voiture</label>
			                <select class="form-control" id="carModelId" @bind="@SelectedModelId" @onclick="SelectRelatedBrand">
				                <option value="0">Sélectionner un modèle</option>
				                @if (CarModels != null)
				                {
					                @foreach (var carModel in CarModels)
					                {
						                <option value="@carModel.Id">@carModel.Name</option>
					                }
				                }
			                </select>
			                <ValidationMessage For="@(() => FormVehicle.CarModelId)"/>
		                </div>
		                <div class="form-group">
			                <label for="buildYear">Année de création</label>
			                <input type="number" class="form-control" id="buildYear" @bind="@FormVehicle.BuildYear" required/>
		                </div>
		                <div class="form-group">
			                <label for="kmNumber">Kilométrage</label>
			                <input type="number" class="form-control" id="kmNumber" @bind="@FormVehicle.KmNumber" required/>
			                <ValidationMessage For="@(() => FormVehicle.KmNumber)"/>
		                </div>
		                <div class="form-group">
			                <label for="energySource">Énergie</label>
			                <select class="form-control" id="energySource" @bind="@FormVehicle.EnergySource">
				                @foreach (var energy in Enum.GetValues(typeof(Energy)))
				                {
					                <option value="@(energy)">@energy</option>
				                }
			                </select>
		                </div>
		                <button type="submit" class="btn btn-primary">Ajouter</button>
	                </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IList<VehicleModel>? _vehicles;
    private List<CarModelModel> CarModels { get; set; }
    private List<BrandModel> Brands { get; set; }
    private VehicleFormModel FormVehicle { get; set; }
    private bool IsAdd { get; set; }
    private int SelectedBrandId { get; set; }
    private int SelectedModelId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleModel>>("api/Vehicle");
        Brands = await HttpClient.GetFromJsonAsync<List<BrandModel>>("api/Brand");
        CarModels = await HttpClient.GetFromJsonAsync<List<CarModelModel>>("api/CarModel");
        FormVehicle = new VehicleFormModel();
    }

    private async Task OnDelete(VehicleModel vehicle)
    {
        var popupResult = await JSRuntime.InvokeAsync<bool>("confirm", $"Etes vous sur de vouloir supprimer le véhicule avec cette immatriculation:  '{vehicle.NumberPlate}'?");
        if (popupResult == true)
        {
            var httpStatus = await HttpClient.DeleteAsync($"api/Vehicle/{vehicle.Id}");
            if (!httpStatus.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
            }
            _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleModel>>("api/Vehicle");
        }
    }

    private async Task AddVehicle()
    {
        var response = await HttpClient.PostAsJsonAsync("api/Vehicle/AddVehicle", FormVehicle);
        if (response.IsSuccessStatusCode)
        {
            await LoadVehicles();
            IsAdd = false;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("alert", errorMessage + FormVehicle.CarModelId);
        }
    }

    private void OpenAddModal()
    {
        IsAdd = true;
    }

    private void CloseModal()
    {
        IsAdd = false;
    }

    private async Task LoadVehicles()
    {
        _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleModel>>("api/Vehicle");
    }

    private async Task LoadCarModels()
    {
        Console.WriteLine("Brand " + SelectedBrandId);
        if (SelectedBrandId != 0)
        {
            CarModels = await HttpClient.GetFromJsonAsync<List<CarModelModel>>($"api/CarModel/GetCarModelsByBrand?brandId={SelectedBrandId}");
        }
        SelectedModelId = 0;
        FormVehicle.CarModelId = 0;
    }

    private async Task SelectRelatedBrand()
    {
        Console.WriteLine("Car model " + SelectedModelId);
        if (SelectedModelId != 0)
        {
            FormVehicle.CarModelId = SelectedModelId;
            Console.WriteLine("Form Car model " + FormVehicle.CarModelId);
            var selectedCarModel = await HttpClient.GetFromJsonAsync<CarModelModel>($"api/CarModel/{SelectedModelId}");
            if (selectedCarModel != null)
            {
                SelectedBrandId = selectedCarModel.BrandId;
            }
        }
    }

    private void ViewDetails(int vehicleId)
    {
	    NavigationManager.NavigateTo($"/VehiculeDetail/{vehicleId}");
    }
}
